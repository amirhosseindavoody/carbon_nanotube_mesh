#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.0.30319.33440.
// 
using namespace System;
ref class NewDataSet;


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[System::Serializable, 
System::ComponentModel::DesignerCategoryAttribute(L"code"), 
System::ComponentModel::ToolboxItem(true), 
System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
public ref class NewDataSet : public ::System::Data::DataSet {
    public : ref class DocumentDataTable;
    public : ref class spacingDataTable;
    public : ref class LengthsDataTable;
    public : ref class DeviceDimensionsDataTable;
    public : ref class chiralityDataTable;
    public : ref class cntDataTable;
    public : ref class regionLengthDataTable;
    public : ref class segmentLengthDataTable;
    public : ref class segmentSeparationDataTable;
    public : ref class DocumentRow;
    public : ref class spacingRow;
    public : ref class LengthsRow;
    public : ref class DeviceDimensionsRow;
    public : ref class chiralityRow;
    public : ref class cntRow;
    public : ref class regionLengthRow;
    public : ref class segmentLengthRow;
    public : ref class segmentSeparationRow;
    public : ref class DocumentRowChangeEvent;
    public : ref class spacingRowChangeEvent;
    public : ref class LengthsRowChangeEvent;
    public : ref class DeviceDimensionsRowChangeEvent;
    public : ref class chiralityRowChangeEvent;
    public : ref class cntRowChangeEvent;
    public : ref class regionLengthRowChangeEvent;
    public : ref class segmentLengthRowChangeEvent;
    public : ref class segmentSeparationRowChangeEvent;
    
    private: NewDataSet::DocumentDataTable^  tableDocument;
    
    private: NewDataSet::spacingDataTable^  tablespacing;
    
    private: NewDataSet::LengthsDataTable^  tableLengths;
    
    private: NewDataSet::DeviceDimensionsDataTable^  tableDeviceDimensions;
    
    private: NewDataSet::chiralityDataTable^  tablechirality;
    
    private: NewDataSet::cntDataTable^  tablecnt;
    
    private: NewDataSet::regionLengthDataTable^  tableregionLength;
    
    private: NewDataSet::segmentLengthDataTable^  tablesegmentLength;
    
    private: NewDataSet::segmentSeparationDataTable^  tablesegmentSeparation;
    
    private: ::System::Data::DataRelation^  relationDocument_spacing;
    
    private: ::System::Data::DataRelation^  relationDocument_Lengths;
    
    private: ::System::Data::DataRelation^  relationDocument_DeviceDimensions;
    
    private: ::System::Data::DataRelation^  relationDocument_chirality;
    
    private: ::System::Data::DataRelation^  relationchirality_cnt;
    
    private: ::System::Data::DataRelation^  relationDocument_regionLength;
    
    private: ::System::Data::DataRelation^  relationDocument_segmentLength;
    
    private: ::System::Data::DataRelation^  relationDocument_segmentSeparation;
    
    private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void DocumentRowChangeEventHandler(::System::Object^  sender, NewDataSet::DocumentRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void spacingRowChangeEventHandler(::System::Object^  sender, NewDataSet::spacingRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void LengthsRowChangeEventHandler(::System::Object^  sender, NewDataSet::LengthsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void DeviceDimensionsRowChangeEventHandler(::System::Object^  sender, NewDataSet::DeviceDimensionsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void chiralityRowChangeEventHandler(::System::Object^  sender, NewDataSet::chiralityRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void cntRowChangeEventHandler(::System::Object^  sender, NewDataSet::cntRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void regionLengthRowChangeEventHandler(::System::Object^  sender, NewDataSet::regionLengthRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void segmentLengthRowChangeEventHandler(::System::Object^  sender, NewDataSet::segmentLengthRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void segmentSeparationRowChangeEventHandler(::System::Object^  sender, NewDataSet::segmentSeparationRowChangeEvent^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    NewDataSet();
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::DocumentDataTable^  Document {
        NewDataSet::DocumentDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::spacingDataTable^  spacing {
        NewDataSet::spacingDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::LengthsDataTable^  Lengths {
        NewDataSet::LengthsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::DeviceDimensionsDataTable^  DeviceDimensions {
        NewDataSet::DeviceDimensionsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::chiralityDataTable^  chirality {
        NewDataSet::chiralityDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::cntDataTable^  cnt {
        NewDataSet::cntDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::regionLengthDataTable^  regionLength {
        NewDataSet::regionLengthDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::segmentLengthDataTable^  segmentLength {
        NewDataSet::segmentLengthDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::segmentSeparationDataTable^  segmentSeparation {
        NewDataSet::segmentSeparationDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::BrowsableAttribute(true), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
    virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
        ::System::Data::SchemaSerializationMode get() override;
        System::Void set(::System::Data::SchemaSerializationMode value) override;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataTableCollection^  Tables {
        ::System::Data::DataTableCollection^  get() new;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataRelationCollection^  Relations {
        ::System::Data::DataRelationCollection^  get() new;
    }
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void InitializeDerivedDataSet() override;
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Data::DataSet^  Clone() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeTables() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeRelations() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars();
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars(::System::Boolean initTable);
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitClass();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeDocument();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializespacing();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeLengths();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeDeviceDimensions();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializechirality();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializecnt();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeregionLength();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializesegmentLength();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializesegmentSeparation();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class DocumentDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnType;
        
        private: ::System::Data::DataColumn^  columnoutputDirectory;
        
        private: ::System::Data::DataColumn^  columnnumberTubes;
        
        private: ::System::Data::DataColumn^  columnfriction;
        
        private: ::System::Data::DataColumn^  columngravity;
        
        private: ::System::Data::DataColumn^  columnnumberExcitons;
        
        private: ::System::Data::DataColumn^  columnnumberTimeSteps;
        
        private: ::System::Data::DataColumn^  columnDocument_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::DocumentRowChangeEventHandler^  DocumentRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::DocumentRowChangeEventHandler^  DocumentRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::DocumentRowChangeEventHandler^  DocumentRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::DocumentRowChangeEventHandler^  DocumentRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        DocumentDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        DocumentDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        DocumentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TypeColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  outputDirectoryColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  numberTubesColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  frictionColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  gravityColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  numberExcitonsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  numberTimeStepsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  Document_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::DocumentRow^  default [::System::Int32 ] {
            NewDataSet::DocumentRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddDocumentRow(NewDataSet::DocumentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::DocumentRow^  AddDocumentRow(
                    System::String^  Type, 
                    System::String^  outputDirectory, 
                    System::Byte numberTubes, 
                    System::Decimal friction, 
                    System::Decimal gravity, 
                    System::UInt16 numberExcitons, 
                    System::UInt32 numberTimeSteps);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::DocumentRow^  NewDocumentRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveDocumentRow(NewDataSet::DocumentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class spacingDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnUnits;
        
        private: ::System::Data::DataColumn^  columnmin;
        
        private: ::System::Data::DataColumn^  columnDocument_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::spacingRowChangeEventHandler^  spacingRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::spacingRowChangeEventHandler^  spacingRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::spacingRowChangeEventHandler^  spacingRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::spacingRowChangeEventHandler^  spacingRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spacingDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spacingDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spacingDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  UnitsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  minColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  Document_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::spacingRow^  default [::System::Int32 ] {
            NewDataSet::spacingRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddspacingRow(NewDataSet::spacingRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::spacingRow^  AddspacingRow(System::String^  Units, System::Decimal min, NewDataSet::DocumentRow^  parentDocumentRowByDocument_spacing);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::spacingRow^  NewspacingRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovespacingRow(NewDataSet::spacingRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class LengthsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnUnits;
        
        private: ::System::Data::DataColumn^  columnLmin;
        
        private: ::System::Data::DataColumn^  columnLmax;
        
        private: ::System::Data::DataColumn^  columnDocument_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LengthsRowChangeEventHandler^  LengthsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LengthsRowChangeEventHandler^  LengthsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LengthsRowChangeEventHandler^  LengthsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LengthsRowChangeEventHandler^  LengthsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LengthsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LengthsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LengthsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  UnitsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  LminColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  LmaxColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  Document_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::LengthsRow^  default [::System::Int32 ] {
            NewDataSet::LengthsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddLengthsRow(NewDataSet::LengthsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::LengthsRow^  AddLengthsRow(System::String^  Units, System::Decimal Lmin, System::Decimal Lmax, NewDataSet::DocumentRow^  parentDocumentRowByDocument_Lengths);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::LengthsRow^  NewLengthsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveLengthsRow(NewDataSet::LengthsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class DeviceDimensionsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnUnits;
        
        private: ::System::Data::DataColumn^  columnxdim;
        
        private: ::System::Data::DataColumn^  columnydim;
        
        private: ::System::Data::DataColumn^  columnzdim;
        
        private: ::System::Data::DataColumn^  columnDocument_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::DeviceDimensionsRowChangeEventHandler^  DeviceDimensionsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::DeviceDimensionsRowChangeEventHandler^  DeviceDimensionsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::DeviceDimensionsRowChangeEventHandler^  DeviceDimensionsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::DeviceDimensionsRowChangeEventHandler^  DeviceDimensionsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        DeviceDimensionsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        DeviceDimensionsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        DeviceDimensionsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  UnitsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  xdimColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ydimColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zdimColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  Document_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::DeviceDimensionsRow^  default [::System::Int32 ] {
            NewDataSet::DeviceDimensionsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddDeviceDimensionsRow(NewDataSet::DeviceDimensionsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::DeviceDimensionsRow^  AddDeviceDimensionsRow(System::String^  Units, System::Decimal xdim, System::Decimal ydim, 
                    System::Decimal zdim, NewDataSet::DocumentRow^  parentDocumentRowByDocument_DeviceDimensions);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::DeviceDimensionsRow^  NewDeviceDimensionsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveDeviceDimensionsRow(NewDataSet::DeviceDimensionsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class chiralityDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnchirality_Id;
        
        private: ::System::Data::DataColumn^  columnDocument_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::chiralityRowChangeEventHandler^  chiralityRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::chiralityRowChangeEventHandler^  chiralityRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::chiralityRowChangeEventHandler^  chiralityRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::chiralityRowChangeEventHandler^  chiralityRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        chiralityDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        chiralityDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        chiralityDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  chirality_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  Document_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::chiralityRow^  default [::System::Int32 ] {
            NewDataSet::chiralityRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddchiralityRow(NewDataSet::chiralityRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::chiralityRow^  AddchiralityRow(NewDataSet::DocumentRow^  parentDocumentRowByDocument_chirality);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::chiralityRow^  NewchiralityRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovechiralityRow(NewDataSet::chiralityRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class cntDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnn;
        
        private: ::System::Data::DataColumn^  columnm;
        
        private: ::System::Data::DataColumn^  columnchirality_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::cntRowChangeEventHandler^  cntRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::cntRowChangeEventHandler^  cntRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::cntRowChangeEventHandler^  cntRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::cntRowChangeEventHandler^  cntRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cntDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cntDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cntDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  nColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  mColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  chirality_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::cntRow^  default [::System::Int32 ] {
            NewDataSet::cntRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddcntRow(NewDataSet::cntRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::cntRow^  AddcntRow(System::Byte n, System::Byte m, NewDataSet::chiralityRow^  parentchiralityRowBychirality_cnt);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::cntRow^  NewcntRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovecntRow(NewDataSet::cntRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class regionLengthDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnUnits;
        
        private: ::System::Data::DataColumn^  columnmin;
        
        private: ::System::Data::DataColumn^  columnDocument_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::regionLengthRowChangeEventHandler^  regionLengthRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::regionLengthRowChangeEventHandler^  regionLengthRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::regionLengthRowChangeEventHandler^  regionLengthRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::regionLengthRowChangeEventHandler^  regionLengthRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        regionLengthDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        regionLengthDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        regionLengthDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  UnitsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  minColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  Document_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::regionLengthRow^  default [::System::Int32 ] {
            NewDataSet::regionLengthRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddregionLengthRow(NewDataSet::regionLengthRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::regionLengthRow^  AddregionLengthRow(System::String^  Units, System::Byte min, NewDataSet::DocumentRow^  parentDocumentRowByDocument_regionLength);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::regionLengthRow^  NewregionLengthRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveregionLengthRow(NewDataSet::regionLengthRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class segmentLengthDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnUnits;
        
        private: ::System::Data::DataColumn^  columnmin;
        
        private: ::System::Data::DataColumn^  columnDocument_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::segmentLengthRowChangeEventHandler^  segmentLengthRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::segmentLengthRowChangeEventHandler^  segmentLengthRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::segmentLengthRowChangeEventHandler^  segmentLengthRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::segmentLengthRowChangeEventHandler^  segmentLengthRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        segmentLengthDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        segmentLengthDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        segmentLengthDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  UnitsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  minColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  Document_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::segmentLengthRow^  default [::System::Int32 ] {
            NewDataSet::segmentLengthRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddsegmentLengthRow(NewDataSet::segmentLengthRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::segmentLengthRow^  AddsegmentLengthRow(System::String^  Units, System::Byte min, NewDataSet::DocumentRow^  parentDocumentRowByDocument_segmentLength);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::segmentLengthRow^  NewsegmentLengthRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovesegmentLengthRow(NewDataSet::segmentLengthRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class segmentSeparationDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnUnits;
        
        private: ::System::Data::DataColumn^  columnmin;
        
        private: ::System::Data::DataColumn^  columnDocument_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::segmentSeparationRowChangeEventHandler^  segmentSeparationRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::segmentSeparationRowChangeEventHandler^  segmentSeparationRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::segmentSeparationRowChangeEventHandler^  segmentSeparationRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::segmentSeparationRowChangeEventHandler^  segmentSeparationRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        segmentSeparationDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        segmentSeparationDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        segmentSeparationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  UnitsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  minColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  Document_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::segmentSeparationRow^  default [::System::Int32 ] {
            NewDataSet::segmentSeparationRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddsegmentSeparationRow(NewDataSet::segmentSeparationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::segmentSeparationRow^  AddsegmentSeparationRow(System::String^  Units, System::Byte min, NewDataSet::DocumentRow^  parentDocumentRowByDocument_segmentSeparation);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::segmentSeparationRow^  NewsegmentSeparationRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovesegmentSeparationRow(NewDataSet::segmentSeparationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class DocumentRow : public ::System::Data::DataRow {
        
        private: NewDataSet::DocumentDataTable^  tableDocument;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        DocumentRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  Type {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  outputDirectory {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Byte numberTubes {
            System::Byte get();
            System::Void set(System::Byte value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal friction {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal gravity {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::UInt16 numberExcitons {
            System::UInt16 get();
            System::Void set(System::UInt16 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::UInt32 numberTimeSteps {
            System::UInt32 get();
            System::Void set(System::UInt32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 Document_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::spacingRow^  >^  GetspacingRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::LengthsRow^  >^  GetLengthsRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::DeviceDimensionsRow^  >^  GetDeviceDimensionsRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::chiralityRow^  >^  GetchiralityRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::regionLengthRow^  >^  GetregionLengthRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::segmentLengthRow^  >^  GetsegmentLengthRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::segmentSeparationRow^  >^  GetsegmentSeparationRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class spacingRow : public ::System::Data::DataRow {
        
        private: NewDataSet::spacingDataTable^  tablespacing;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spacingRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  Units {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal min {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 Document_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::DocumentRow^  DocumentRow {
            NewDataSet::DocumentRow^  get();
            System::Void set(NewDataSet::DocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class LengthsRow : public ::System::Data::DataRow {
        
        private: NewDataSet::LengthsDataTable^  tableLengths;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LengthsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  Units {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal Lmin {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal Lmax {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 Document_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::DocumentRow^  DocumentRow {
            NewDataSet::DocumentRow^  get();
            System::Void set(NewDataSet::DocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class DeviceDimensionsRow : public ::System::Data::DataRow {
        
        private: NewDataSet::DeviceDimensionsDataTable^  tableDeviceDimensions;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        DeviceDimensionsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  Units {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal xdim {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal ydim {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal zdim {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 Document_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::DocumentRow^  DocumentRow {
            NewDataSet::DocumentRow^  get();
            System::Void set(NewDataSet::DocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class chiralityRow : public ::System::Data::DataRow {
        
        private: NewDataSet::chiralityDataTable^  tablechirality;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        chiralityRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 chirality_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 Document_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::DocumentRow^  DocumentRow {
            NewDataSet::DocumentRow^  get();
            System::Void set(NewDataSet::DocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::cntRow^  >^  GetcntRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class cntRow : public ::System::Data::DataRow {
        
        private: NewDataSet::cntDataTable^  tablecnt;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cntRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Byte n {
            System::Byte get();
            System::Void set(System::Byte value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Byte m {
            System::Byte get();
            System::Void set(System::Byte value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 chirality_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::chiralityRow^  chiralityRow {
            NewDataSet::chiralityRow^  get();
            System::Void set(NewDataSet::chiralityRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Ischirality_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setchirality_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class regionLengthRow : public ::System::Data::DataRow {
        
        private: NewDataSet::regionLengthDataTable^  tableregionLength;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        regionLengthRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  Units {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Byte min {
            System::Byte get();
            System::Void set(System::Byte value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 Document_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::DocumentRow^  DocumentRow {
            NewDataSet::DocumentRow^  get();
            System::Void set(NewDataSet::DocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class segmentLengthRow : public ::System::Data::DataRow {
        
        private: NewDataSet::segmentLengthDataTable^  tablesegmentLength;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        segmentLengthRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  Units {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Byte min {
            System::Byte get();
            System::Void set(System::Byte value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 Document_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::DocumentRow^  DocumentRow {
            NewDataSet::DocumentRow^  get();
            System::Void set(NewDataSet::DocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class segmentSeparationRow : public ::System::Data::DataRow {
        
        private: NewDataSet::segmentSeparationDataTable^  tablesegmentSeparation;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        segmentSeparationRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  Units {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Byte min {
            System::Byte get();
            System::Void set(System::Byte value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 Document_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::DocumentRow^  DocumentRow {
            NewDataSet::DocumentRow^  get();
            System::Void set(NewDataSet::DocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetDocument_IdNull();
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class DocumentRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::DocumentRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        DocumentRowChangeEvent(NewDataSet::DocumentRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::DocumentRow^  Row {
            NewDataSet::DocumentRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class spacingRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::spacingRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        spacingRowChangeEvent(NewDataSet::spacingRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::spacingRow^  Row {
            NewDataSet::spacingRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class LengthsRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::LengthsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LengthsRowChangeEvent(NewDataSet::LengthsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::LengthsRow^  Row {
            NewDataSet::LengthsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class DeviceDimensionsRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::DeviceDimensionsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        DeviceDimensionsRowChangeEvent(NewDataSet::DeviceDimensionsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::DeviceDimensionsRow^  Row {
            NewDataSet::DeviceDimensionsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class chiralityRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::chiralityRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        chiralityRowChangeEvent(NewDataSet::chiralityRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::chiralityRow^  Row {
            NewDataSet::chiralityRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class cntRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::cntRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cntRowChangeEvent(NewDataSet::cntRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::cntRow^  Row {
            NewDataSet::cntRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class regionLengthRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::regionLengthRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        regionLengthRowChangeEvent(NewDataSet::regionLengthRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::regionLengthRow^  Row {
            NewDataSet::regionLengthRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class segmentLengthRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::segmentLengthRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        segmentLengthRowChangeEvent(NewDataSet::segmentLengthRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::segmentLengthRow^  Row {
            NewDataSet::segmentLengthRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class segmentSeparationRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::segmentSeparationRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        segmentSeparationRowChangeEvent(NewDataSet::segmentSeparationRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::segmentSeparationRow^  Row {
            NewDataSet::segmentSeparationRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
};


inline NewDataSet::NewDataSet() {
    this->BeginInit();
    this->InitClass();
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    __super::Relations->CollectionChanged += schemaChangedHandler;
    this->EndInit();
}

inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataSet(info, context, false) {
    if (this->IsBinarySerialized(info, context) == true) {
        this->InitVars(false);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler1;
        this->Relations->CollectionChanged += schemaChangedHandler1;
        return;
    }
    ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
    if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        if (ds->Tables[L"Document"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::DocumentDataTable(ds->Tables[L"Document"])));
        }
        if (ds->Tables[L"spacing"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::spacingDataTable(ds->Tables[L"spacing"])));
        }
        if (ds->Tables[L"Lengths"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::LengthsDataTable(ds->Tables[L"Lengths"])));
        }
        if (ds->Tables[L"DeviceDimensions"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::DeviceDimensionsDataTable(ds->Tables[L"DeviceDimensions"])));
        }
        if (ds->Tables[L"chirality"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::chiralityDataTable(ds->Tables[L"chirality"])));
        }
        if (ds->Tables[L"cnt"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::cntDataTable(ds->Tables[L"cnt"])));
        }
        if (ds->Tables[L"regionLength"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::regionLengthDataTable(ds->Tables[L"regionLength"])));
        }
        if (ds->Tables[L"segmentLength"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::segmentLengthDataTable(ds->Tables[L"segmentLength"])));
        }
        if (ds->Tables[L"segmentSeparation"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::segmentSeparationDataTable(ds->Tables[L"segmentSeparation"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
    }
    this->GetSerializationData(info, context);
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    this->Relations->CollectionChanged += schemaChangedHandler;
}

inline NewDataSet::DocumentDataTable^  NewDataSet::Document::get() {
    return this->tableDocument;
}

inline NewDataSet::spacingDataTable^  NewDataSet::spacing::get() {
    return this->tablespacing;
}

inline NewDataSet::LengthsDataTable^  NewDataSet::Lengths::get() {
    return this->tableLengths;
}

inline NewDataSet::DeviceDimensionsDataTable^  NewDataSet::DeviceDimensions::get() {
    return this->tableDeviceDimensions;
}

inline NewDataSet::chiralityDataTable^  NewDataSet::chirality::get() {
    return this->tablechirality;
}

inline NewDataSet::cntDataTable^  NewDataSet::cnt::get() {
    return this->tablecnt;
}

inline NewDataSet::regionLengthDataTable^  NewDataSet::regionLength::get() {
    return this->tableregionLength;
}

inline NewDataSet::segmentLengthDataTable^  NewDataSet::segmentLength::get() {
    return this->tablesegmentLength;
}

inline NewDataSet::segmentSeparationDataTable^  NewDataSet::segmentSeparation::get() {
    return this->tablesegmentSeparation;
}

inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
    return this->_schemaSerializationMode;
}
inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
    this->_schemaSerializationMode = __identifier(value);
}

inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
    return __super::Tables;
}

inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
    return __super::Relations;
}

inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline ::System::Data::DataSet^  NewDataSet::Clone() {
    NewDataSet^  cln = (cli::safe_cast<NewDataSet^  >(__super::Clone()));
    cln->InitVars();
    cln->SchemaSerializationMode = this->SchemaSerializationMode;
    return cln;
}

inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
    return false;
}

inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
    if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        this->Reset();
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXml(reader);
        if (ds->Tables[L"Document"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::DocumentDataTable(ds->Tables[L"Document"])));
        }
        if (ds->Tables[L"spacing"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::spacingDataTable(ds->Tables[L"spacing"])));
        }
        if (ds->Tables[L"Lengths"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::LengthsDataTable(ds->Tables[L"Lengths"])));
        }
        if (ds->Tables[L"DeviceDimensions"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::DeviceDimensionsDataTable(ds->Tables[L"DeviceDimensions"])));
        }
        if (ds->Tables[L"chirality"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::chiralityDataTable(ds->Tables[L"chirality"])));
        }
        if (ds->Tables[L"cnt"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::cntDataTable(ds->Tables[L"cnt"])));
        }
        if (ds->Tables[L"regionLength"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::regionLengthDataTable(ds->Tables[L"regionLength"])));
        }
        if (ds->Tables[L"segmentLength"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::segmentLengthDataTable(ds->Tables[L"segmentLength"])));
        }
        if (ds->Tables[L"segmentSeparation"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::segmentSeparationDataTable(ds->Tables[L"segmentSeparation"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXml(reader);
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
    ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
    this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
    stream->Position = 0;
    return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
}

inline ::System::Void NewDataSet::InitVars() {
    this->InitVars(true);
}

inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
    this->tableDocument = (cli::safe_cast<NewDataSet::DocumentDataTable^  >(__super::Tables[L"Document"]));
    if (initTable == true) {
        if (this->tableDocument != nullptr) {
            this->tableDocument->InitVars();
        }
    }
    this->tablespacing = (cli::safe_cast<NewDataSet::spacingDataTable^  >(__super::Tables[L"spacing"]));
    if (initTable == true) {
        if (this->tablespacing != nullptr) {
            this->tablespacing->InitVars();
        }
    }
    this->tableLengths = (cli::safe_cast<NewDataSet::LengthsDataTable^  >(__super::Tables[L"Lengths"]));
    if (initTable == true) {
        if (this->tableLengths != nullptr) {
            this->tableLengths->InitVars();
        }
    }
    this->tableDeviceDimensions = (cli::safe_cast<NewDataSet::DeviceDimensionsDataTable^  >(__super::Tables[L"DeviceDimensions"]));
    if (initTable == true) {
        if (this->tableDeviceDimensions != nullptr) {
            this->tableDeviceDimensions->InitVars();
        }
    }
    this->tablechirality = (cli::safe_cast<NewDataSet::chiralityDataTable^  >(__super::Tables[L"chirality"]));
    if (initTable == true) {
        if (this->tablechirality != nullptr) {
            this->tablechirality->InitVars();
        }
    }
    this->tablecnt = (cli::safe_cast<NewDataSet::cntDataTable^  >(__super::Tables[L"cnt"]));
    if (initTable == true) {
        if (this->tablecnt != nullptr) {
            this->tablecnt->InitVars();
        }
    }
    this->tableregionLength = (cli::safe_cast<NewDataSet::regionLengthDataTable^  >(__super::Tables[L"regionLength"]));
    if (initTable == true) {
        if (this->tableregionLength != nullptr) {
            this->tableregionLength->InitVars();
        }
    }
    this->tablesegmentLength = (cli::safe_cast<NewDataSet::segmentLengthDataTable^  >(__super::Tables[L"segmentLength"]));
    if (initTable == true) {
        if (this->tablesegmentLength != nullptr) {
            this->tablesegmentLength->InitVars();
        }
    }
    this->tablesegmentSeparation = (cli::safe_cast<NewDataSet::segmentSeparationDataTable^  >(__super::Tables[L"segmentSeparation"]));
    if (initTable == true) {
        if (this->tablesegmentSeparation != nullptr) {
            this->tablesegmentSeparation->InitVars();
        }
    }
    this->relationDocument_spacing = this->Relations[L"Document_spacing"];
    this->relationDocument_Lengths = this->Relations[L"Document_Lengths"];
    this->relationDocument_DeviceDimensions = this->Relations[L"Document_DeviceDimensions"];
    this->relationDocument_chirality = this->Relations[L"Document_chirality"];
    this->relationchirality_cnt = this->Relations[L"chirality_cnt"];
    this->relationDocument_regionLength = this->Relations[L"Document_regionLength"];
    this->relationDocument_segmentLength = this->Relations[L"Document_segmentLength"];
    this->relationDocument_segmentSeparation = this->Relations[L"Document_segmentSeparation"];
}

inline ::System::Void NewDataSet::InitClass() {
    this->DataSetName = L"NewDataSet";
    this->Prefix = L"";
    this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
    this->EnforceConstraints = true;
    this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
    this->tableDocument = (gcnew NewDataSet::DocumentDataTable());
    __super::Tables->Add(this->tableDocument);
    this->tablespacing = (gcnew NewDataSet::spacingDataTable());
    __super::Tables->Add(this->tablespacing);
    this->tableLengths = (gcnew NewDataSet::LengthsDataTable());
    __super::Tables->Add(this->tableLengths);
    this->tableDeviceDimensions = (gcnew NewDataSet::DeviceDimensionsDataTable());
    __super::Tables->Add(this->tableDeviceDimensions);
    this->tablechirality = (gcnew NewDataSet::chiralityDataTable());
    __super::Tables->Add(this->tablechirality);
    this->tablecnt = (gcnew NewDataSet::cntDataTable());
    __super::Tables->Add(this->tablecnt);
    this->tableregionLength = (gcnew NewDataSet::regionLengthDataTable());
    __super::Tables->Add(this->tableregionLength);
    this->tablesegmentLength = (gcnew NewDataSet::segmentLengthDataTable());
    __super::Tables->Add(this->tablesegmentLength);
    this->tablesegmentSeparation = (gcnew NewDataSet::segmentSeparationDataTable());
    __super::Tables->Add(this->tablesegmentSeparation);
    ::System::Data::ForeignKeyConstraint^  fkc;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Document_spacing", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDocument->Document_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespacing->Document_IdColumn}));
    this->tablespacing->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Document_Lengths", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDocument->Document_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLengths->Document_IdColumn}));
    this->tableLengths->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Document_DeviceDimensions", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDocument->Document_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDeviceDimensions->Document_IdColumn}));
    this->tableDeviceDimensions->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Document_chirality", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDocument->Document_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablechirality->Document_IdColumn}));
    this->tablechirality->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"chirality_cnt", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablechirality->chirality_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecnt->chirality_IdColumn}));
    this->tablecnt->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Document_regionLength", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDocument->Document_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableregionLength->Document_IdColumn}));
    this->tableregionLength->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Document_segmentLength", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDocument->Document_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesegmentLength->Document_IdColumn}));
    this->tablesegmentLength->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Document_segmentSeparation", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDocument->Document_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesegmentSeparation->Document_IdColumn}));
    this->tablesegmentSeparation->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    this->relationDocument_spacing = (gcnew ::System::Data::DataRelation(L"Document_spacing", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDocument->Document_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespacing->Document_IdColumn}, false));
    this->relationDocument_spacing->Nested = true;
    this->Relations->Add(this->relationDocument_spacing);
    this->relationDocument_Lengths = (gcnew ::System::Data::DataRelation(L"Document_Lengths", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDocument->Document_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLengths->Document_IdColumn}, false));
    this->relationDocument_Lengths->Nested = true;
    this->Relations->Add(this->relationDocument_Lengths);
    this->relationDocument_DeviceDimensions = (gcnew ::System::Data::DataRelation(L"Document_DeviceDimensions", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDocument->Document_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDeviceDimensions->Document_IdColumn}, false));
    this->relationDocument_DeviceDimensions->Nested = true;
    this->Relations->Add(this->relationDocument_DeviceDimensions);
    this->relationDocument_chirality = (gcnew ::System::Data::DataRelation(L"Document_chirality", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDocument->Document_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablechirality->Document_IdColumn}, false));
    this->relationDocument_chirality->Nested = true;
    this->Relations->Add(this->relationDocument_chirality);
    this->relationchirality_cnt = (gcnew ::System::Data::DataRelation(L"chirality_cnt", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablechirality->chirality_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecnt->chirality_IdColumn}, false));
    this->relationchirality_cnt->Nested = true;
    this->Relations->Add(this->relationchirality_cnt);
    this->relationDocument_regionLength = (gcnew ::System::Data::DataRelation(L"Document_regionLength", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDocument->Document_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableregionLength->Document_IdColumn}, false));
    this->relationDocument_regionLength->Nested = true;
    this->Relations->Add(this->relationDocument_regionLength);
    this->relationDocument_segmentLength = (gcnew ::System::Data::DataRelation(L"Document_segmentLength", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDocument->Document_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesegmentLength->Document_IdColumn}, false));
    this->relationDocument_segmentLength->Nested = true;
    this->Relations->Add(this->relationDocument_segmentLength);
    this->relationDocument_segmentSeparation = (gcnew ::System::Data::DataRelation(L"Document_segmentSeparation", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDocument->Document_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesegmentSeparation->Document_IdColumn}, false));
    this->relationDocument_segmentSeparation->Nested = true;
    this->Relations->Add(this->relationDocument_segmentSeparation);
}

inline ::System::Boolean NewDataSet::ShouldSerializeDocument() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializespacing() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeLengths() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeDeviceDimensions() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializechirality() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializecnt() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeregionLength() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializesegmentLength() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializesegmentSeparation() {
    return false;
}

inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
    if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any->Namespace = ds->Namespace;
    sequence->Items->Add(any);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::DocumentDataTable::DocumentDataTable() {
    this->TableName = L"Document";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::DocumentDataTable::DocumentDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::DocumentDataTable::DocumentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::DocumentDataTable::TypeColumn::get() {
    return this->columnType;
}

inline ::System::Data::DataColumn^  NewDataSet::DocumentDataTable::outputDirectoryColumn::get() {
    return this->columnoutputDirectory;
}

inline ::System::Data::DataColumn^  NewDataSet::DocumentDataTable::numberTubesColumn::get() {
    return this->columnnumberTubes;
}

inline ::System::Data::DataColumn^  NewDataSet::DocumentDataTable::frictionColumn::get() {
    return this->columnfriction;
}

inline ::System::Data::DataColumn^  NewDataSet::DocumentDataTable::gravityColumn::get() {
    return this->columngravity;
}

inline ::System::Data::DataColumn^  NewDataSet::DocumentDataTable::numberExcitonsColumn::get() {
    return this->columnnumberExcitons;
}

inline ::System::Data::DataColumn^  NewDataSet::DocumentDataTable::numberTimeStepsColumn::get() {
    return this->columnnumberTimeSteps;
}

inline ::System::Data::DataColumn^  NewDataSet::DocumentDataTable::Document_IdColumn::get() {
    return this->columnDocument_Id;
}

inline ::System::Int32 NewDataSet::DocumentDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::DocumentRow^  NewDataSet::DocumentDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::DocumentRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::DocumentDataTable::AddDocumentRow(NewDataSet::DocumentRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::DocumentRow^  NewDataSet::DocumentDataTable::AddDocumentRow(
            System::String^  Type, 
            System::String^  outputDirectory, 
            System::Byte numberTubes, 
            System::Decimal friction, 
            System::Decimal gravity, 
            System::UInt16 numberExcitons, 
            System::UInt32 numberTimeSteps) {
    NewDataSet::DocumentRow^  rowDocumentRow = (cli::safe_cast<NewDataSet::DocumentRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(8) {Type, outputDirectory, 
        numberTubes, friction, gravity, numberExcitons, numberTimeSteps, nullptr};
    rowDocumentRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowDocumentRow);
    return rowDocumentRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::DocumentDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::DocumentDataTable::Clone() {
    NewDataSet::DocumentDataTable^  cln = (cli::safe_cast<NewDataSet::DocumentDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::DocumentDataTable::CreateInstance() {
    return (gcnew NewDataSet::DocumentDataTable());
}

inline ::System::Void NewDataSet::DocumentDataTable::InitVars() {
    this->columnType = __super::Columns[L"Type"];
    this->columnoutputDirectory = __super::Columns[L"outputDirectory"];
    this->columnnumberTubes = __super::Columns[L"numberTubes"];
    this->columnfriction = __super::Columns[L"friction"];
    this->columngravity = __super::Columns[L"gravity"];
    this->columnnumberExcitons = __super::Columns[L"numberExcitons"];
    this->columnnumberTimeSteps = __super::Columns[L"numberTimeSteps"];
    this->columnDocument_Id = __super::Columns[L"Document_Id"];
}

inline ::System::Void NewDataSet::DocumentDataTable::InitClass() {
    this->columnType = (gcnew ::System::Data::DataColumn(L"Type", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnType);
    this->columnoutputDirectory = (gcnew ::System::Data::DataColumn(L"outputDirectory", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnoutputDirectory);
    this->columnnumberTubes = (gcnew ::System::Data::DataColumn(L"numberTubes", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnnumberTubes);
    this->columnfriction = (gcnew ::System::Data::DataColumn(L"friction", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnfriction);
    this->columngravity = (gcnew ::System::Data::DataColumn(L"gravity", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columngravity);
    this->columnnumberExcitons = (gcnew ::System::Data::DataColumn(L"numberExcitons", ::System::UInt16::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnnumberExcitons);
    this->columnnumberTimeSteps = (gcnew ::System::Data::DataColumn(L"numberTimeSteps", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnnumberTimeSteps);
    this->columnDocument_Id = (gcnew ::System::Data::DataColumn(L"Document_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnDocument_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnDocument_Id}, 
            true)));
    this->columnType->AllowDBNull = false;
    this->columnType->Namespace = L"";
    this->columnoutputDirectory->AllowDBNull = false;
    this->columnnumberTubes->AllowDBNull = false;
    this->columnfriction->AllowDBNull = false;
    this->columngravity->AllowDBNull = false;
    this->columnnumberExcitons->AllowDBNull = false;
    this->columnnumberTimeSteps->AllowDBNull = false;
    this->columnDocument_Id->AutoIncrement = true;
    this->columnDocument_Id->AllowDBNull = false;
    this->columnDocument_Id->Unique = true;
}

inline NewDataSet::DocumentRow^  NewDataSet::DocumentDataTable::NewDocumentRow() {
    return (cli::safe_cast<NewDataSet::DocumentRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::DocumentDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::DocumentRow(builder));
}

inline ::System::Type^  NewDataSet::DocumentDataTable::GetRowType() {
    return NewDataSet::DocumentRow::typeid;
}

inline ::System::Void NewDataSet::DocumentDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->DocumentRowChanged(this, (gcnew NewDataSet::DocumentRowChangeEvent((cli::safe_cast<NewDataSet::DocumentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::DocumentDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->DocumentRowChanging(this, (gcnew NewDataSet::DocumentRowChangeEvent((cli::safe_cast<NewDataSet::DocumentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::DocumentDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->DocumentRowDeleted(this, (gcnew NewDataSet::DocumentRowChangeEvent((cli::safe_cast<NewDataSet::DocumentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::DocumentDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->DocumentRowDeleting(this, (gcnew NewDataSet::DocumentRowChangeEvent((cli::safe_cast<NewDataSet::DocumentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::DocumentDataTable::RemoveDocumentRow(NewDataSet::DocumentRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::DocumentDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"DocumentDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::spacingDataTable::spacingDataTable() {
    this->TableName = L"spacing";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::spacingDataTable::spacingDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::spacingDataTable::spacingDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::spacingDataTable::UnitsColumn::get() {
    return this->columnUnits;
}

inline ::System::Data::DataColumn^  NewDataSet::spacingDataTable::minColumn::get() {
    return this->columnmin;
}

inline ::System::Data::DataColumn^  NewDataSet::spacingDataTable::Document_IdColumn::get() {
    return this->columnDocument_Id;
}

inline ::System::Int32 NewDataSet::spacingDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::spacingRow^  NewDataSet::spacingDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::spacingRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::spacingDataTable::AddspacingRow(NewDataSet::spacingRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::spacingRow^  NewDataSet::spacingDataTable::AddspacingRow(System::String^  Units, System::Decimal min, 
            NewDataSet::DocumentRow^  parentDocumentRowByDocument_spacing) {
    NewDataSet::spacingRow^  rowspacingRow = (cli::safe_cast<NewDataSet::spacingRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {Units, min, nullptr};
    if (parentDocumentRowByDocument_spacing != nullptr) {
        columnValuesArray[2] = parentDocumentRowByDocument_spacing[7];
    }
    rowspacingRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowspacingRow);
    return rowspacingRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::spacingDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::spacingDataTable::Clone() {
    NewDataSet::spacingDataTable^  cln = (cli::safe_cast<NewDataSet::spacingDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::spacingDataTable::CreateInstance() {
    return (gcnew NewDataSet::spacingDataTable());
}

inline ::System::Void NewDataSet::spacingDataTable::InitVars() {
    this->columnUnits = __super::Columns[L"Units"];
    this->columnmin = __super::Columns[L"min"];
    this->columnDocument_Id = __super::Columns[L"Document_Id"];
}

inline ::System::Void NewDataSet::spacingDataTable::InitClass() {
    this->columnUnits = (gcnew ::System::Data::DataColumn(L"Units", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnUnits);
    this->columnmin = (gcnew ::System::Data::DataColumn(L"min", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnmin);
    this->columnDocument_Id = (gcnew ::System::Data::DataColumn(L"Document_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnDocument_Id);
    this->columnUnits->AllowDBNull = false;
    this->columnmin->AllowDBNull = false;
}

inline NewDataSet::spacingRow^  NewDataSet::spacingDataTable::NewspacingRow() {
    return (cli::safe_cast<NewDataSet::spacingRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::spacingDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::spacingRow(builder));
}

inline ::System::Type^  NewDataSet::spacingDataTable::GetRowType() {
    return NewDataSet::spacingRow::typeid;
}

inline ::System::Void NewDataSet::spacingDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->spacingRowChanged(this, (gcnew NewDataSet::spacingRowChangeEvent((cli::safe_cast<NewDataSet::spacingRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::spacingDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->spacingRowChanging(this, (gcnew NewDataSet::spacingRowChangeEvent((cli::safe_cast<NewDataSet::spacingRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::spacingDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->spacingRowDeleted(this, (gcnew NewDataSet::spacingRowChangeEvent((cli::safe_cast<NewDataSet::spacingRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::spacingDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->spacingRowDeleting(this, (gcnew NewDataSet::spacingRowChangeEvent((cli::safe_cast<NewDataSet::spacingRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::spacingDataTable::RemovespacingRow(NewDataSet::spacingRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::spacingDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"spacingDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::LengthsDataTable::LengthsDataTable() {
    this->TableName = L"Lengths";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::LengthsDataTable::LengthsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::LengthsDataTable::LengthsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::LengthsDataTable::UnitsColumn::get() {
    return this->columnUnits;
}

inline ::System::Data::DataColumn^  NewDataSet::LengthsDataTable::LminColumn::get() {
    return this->columnLmin;
}

inline ::System::Data::DataColumn^  NewDataSet::LengthsDataTable::LmaxColumn::get() {
    return this->columnLmax;
}

inline ::System::Data::DataColumn^  NewDataSet::LengthsDataTable::Document_IdColumn::get() {
    return this->columnDocument_Id;
}

inline ::System::Int32 NewDataSet::LengthsDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::LengthsRow^  NewDataSet::LengthsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::LengthsRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::LengthsDataTable::AddLengthsRow(NewDataSet::LengthsRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::LengthsRow^  NewDataSet::LengthsDataTable::AddLengthsRow(System::String^  Units, System::Decimal Lmin, 
            System::Decimal Lmax, NewDataSet::DocumentRow^  parentDocumentRowByDocument_Lengths) {
    NewDataSet::LengthsRow^  rowLengthsRow = (cli::safe_cast<NewDataSet::LengthsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {Units, Lmin, Lmax, nullptr};
    if (parentDocumentRowByDocument_Lengths != nullptr) {
        columnValuesArray[3] = parentDocumentRowByDocument_Lengths[7];
    }
    rowLengthsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowLengthsRow);
    return rowLengthsRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::LengthsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::LengthsDataTable::Clone() {
    NewDataSet::LengthsDataTable^  cln = (cli::safe_cast<NewDataSet::LengthsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::LengthsDataTable::CreateInstance() {
    return (gcnew NewDataSet::LengthsDataTable());
}

inline ::System::Void NewDataSet::LengthsDataTable::InitVars() {
    this->columnUnits = __super::Columns[L"Units"];
    this->columnLmin = __super::Columns[L"Lmin"];
    this->columnLmax = __super::Columns[L"Lmax"];
    this->columnDocument_Id = __super::Columns[L"Document_Id"];
}

inline ::System::Void NewDataSet::LengthsDataTable::InitClass() {
    this->columnUnits = (gcnew ::System::Data::DataColumn(L"Units", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnUnits);
    this->columnLmin = (gcnew ::System::Data::DataColumn(L"Lmin", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnLmin);
    this->columnLmax = (gcnew ::System::Data::DataColumn(L"Lmax", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnLmax);
    this->columnDocument_Id = (gcnew ::System::Data::DataColumn(L"Document_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnDocument_Id);
    this->columnUnits->AllowDBNull = false;
    this->columnLmin->AllowDBNull = false;
    this->columnLmax->AllowDBNull = false;
}

inline NewDataSet::LengthsRow^  NewDataSet::LengthsDataTable::NewLengthsRow() {
    return (cli::safe_cast<NewDataSet::LengthsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::LengthsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::LengthsRow(builder));
}

inline ::System::Type^  NewDataSet::LengthsDataTable::GetRowType() {
    return NewDataSet::LengthsRow::typeid;
}

inline ::System::Void NewDataSet::LengthsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->LengthsRowChanged(this, (gcnew NewDataSet::LengthsRowChangeEvent((cli::safe_cast<NewDataSet::LengthsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::LengthsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->LengthsRowChanging(this, (gcnew NewDataSet::LengthsRowChangeEvent((cli::safe_cast<NewDataSet::LengthsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::LengthsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->LengthsRowDeleted(this, (gcnew NewDataSet::LengthsRowChangeEvent((cli::safe_cast<NewDataSet::LengthsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::LengthsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->LengthsRowDeleting(this, (gcnew NewDataSet::LengthsRowChangeEvent((cli::safe_cast<NewDataSet::LengthsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::LengthsDataTable::RemoveLengthsRow(NewDataSet::LengthsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::LengthsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"LengthsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::DeviceDimensionsDataTable::DeviceDimensionsDataTable() {
    this->TableName = L"DeviceDimensions";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::DeviceDimensionsDataTable::DeviceDimensionsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::DeviceDimensionsDataTable::DeviceDimensionsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::DeviceDimensionsDataTable::UnitsColumn::get() {
    return this->columnUnits;
}

inline ::System::Data::DataColumn^  NewDataSet::DeviceDimensionsDataTable::xdimColumn::get() {
    return this->columnxdim;
}

inline ::System::Data::DataColumn^  NewDataSet::DeviceDimensionsDataTable::ydimColumn::get() {
    return this->columnydim;
}

inline ::System::Data::DataColumn^  NewDataSet::DeviceDimensionsDataTable::zdimColumn::get() {
    return this->columnzdim;
}

inline ::System::Data::DataColumn^  NewDataSet::DeviceDimensionsDataTable::Document_IdColumn::get() {
    return this->columnDocument_Id;
}

inline ::System::Int32 NewDataSet::DeviceDimensionsDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::DeviceDimensionsRow^  NewDataSet::DeviceDimensionsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::DeviceDimensionsRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::DeviceDimensionsDataTable::AddDeviceDimensionsRow(NewDataSet::DeviceDimensionsRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::DeviceDimensionsRow^  NewDataSet::DeviceDimensionsDataTable::AddDeviceDimensionsRow(System::String^  Units, 
            System::Decimal xdim, System::Decimal ydim, System::Decimal zdim, NewDataSet::DocumentRow^  parentDocumentRowByDocument_DeviceDimensions) {
    NewDataSet::DeviceDimensionsRow^  rowDeviceDimensionsRow = (cli::safe_cast<NewDataSet::DeviceDimensionsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {Units, xdim, ydim, zdim, 
        nullptr};
    if (parentDocumentRowByDocument_DeviceDimensions != nullptr) {
        columnValuesArray[4] = parentDocumentRowByDocument_DeviceDimensions[7];
    }
    rowDeviceDimensionsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowDeviceDimensionsRow);
    return rowDeviceDimensionsRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::DeviceDimensionsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::DeviceDimensionsDataTable::Clone() {
    NewDataSet::DeviceDimensionsDataTable^  cln = (cli::safe_cast<NewDataSet::DeviceDimensionsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::DeviceDimensionsDataTable::CreateInstance() {
    return (gcnew NewDataSet::DeviceDimensionsDataTable());
}

inline ::System::Void NewDataSet::DeviceDimensionsDataTable::InitVars() {
    this->columnUnits = __super::Columns[L"Units"];
    this->columnxdim = __super::Columns[L"xdim"];
    this->columnydim = __super::Columns[L"ydim"];
    this->columnzdim = __super::Columns[L"zdim"];
    this->columnDocument_Id = __super::Columns[L"Document_Id"];
}

inline ::System::Void NewDataSet::DeviceDimensionsDataTable::InitClass() {
    this->columnUnits = (gcnew ::System::Data::DataColumn(L"Units", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnUnits);
    this->columnxdim = (gcnew ::System::Data::DataColumn(L"xdim", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnxdim);
    this->columnydim = (gcnew ::System::Data::DataColumn(L"ydim", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnydim);
    this->columnzdim = (gcnew ::System::Data::DataColumn(L"zdim", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnzdim);
    this->columnDocument_Id = (gcnew ::System::Data::DataColumn(L"Document_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnDocument_Id);
    this->columnUnits->AllowDBNull = false;
    this->columnxdim->AllowDBNull = false;
    this->columnydim->AllowDBNull = false;
    this->columnzdim->AllowDBNull = false;
}

inline NewDataSet::DeviceDimensionsRow^  NewDataSet::DeviceDimensionsDataTable::NewDeviceDimensionsRow() {
    return (cli::safe_cast<NewDataSet::DeviceDimensionsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::DeviceDimensionsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::DeviceDimensionsRow(builder));
}

inline ::System::Type^  NewDataSet::DeviceDimensionsDataTable::GetRowType() {
    return NewDataSet::DeviceDimensionsRow::typeid;
}

inline ::System::Void NewDataSet::DeviceDimensionsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->DeviceDimensionsRowChanged(this, (gcnew NewDataSet::DeviceDimensionsRowChangeEvent((cli::safe_cast<NewDataSet::DeviceDimensionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::DeviceDimensionsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->DeviceDimensionsRowChanging(this, (gcnew NewDataSet::DeviceDimensionsRowChangeEvent((cli::safe_cast<NewDataSet::DeviceDimensionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::DeviceDimensionsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->DeviceDimensionsRowDeleted(this, (gcnew NewDataSet::DeviceDimensionsRowChangeEvent((cli::safe_cast<NewDataSet::DeviceDimensionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::DeviceDimensionsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->DeviceDimensionsRowDeleting(this, (gcnew NewDataSet::DeviceDimensionsRowChangeEvent((cli::safe_cast<NewDataSet::DeviceDimensionsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::DeviceDimensionsDataTable::RemoveDeviceDimensionsRow(NewDataSet::DeviceDimensionsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::DeviceDimensionsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"DeviceDimensionsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::chiralityDataTable::chiralityDataTable() {
    this->TableName = L"chirality";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::chiralityDataTable::chiralityDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::chiralityDataTable::chiralityDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::chiralityDataTable::chirality_IdColumn::get() {
    return this->columnchirality_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::chiralityDataTable::Document_IdColumn::get() {
    return this->columnDocument_Id;
}

inline ::System::Int32 NewDataSet::chiralityDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::chiralityRow^  NewDataSet::chiralityDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::chiralityRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::chiralityDataTable::AddchiralityRow(NewDataSet::chiralityRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::chiralityRow^  NewDataSet::chiralityDataTable::AddchiralityRow(NewDataSet::DocumentRow^  parentDocumentRowByDocument_chirality) {
    NewDataSet::chiralityRow^  rowchiralityRow = (cli::safe_cast<NewDataSet::chiralityRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentDocumentRowByDocument_chirality != nullptr) {
        columnValuesArray[1] = parentDocumentRowByDocument_chirality[7];
    }
    rowchiralityRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowchiralityRow);
    return rowchiralityRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::chiralityDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::chiralityDataTable::Clone() {
    NewDataSet::chiralityDataTable^  cln = (cli::safe_cast<NewDataSet::chiralityDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::chiralityDataTable::CreateInstance() {
    return (gcnew NewDataSet::chiralityDataTable());
}

inline ::System::Void NewDataSet::chiralityDataTable::InitVars() {
    this->columnchirality_Id = __super::Columns[L"chirality_Id"];
    this->columnDocument_Id = __super::Columns[L"Document_Id"];
}

inline ::System::Void NewDataSet::chiralityDataTable::InitClass() {
    this->columnchirality_Id = (gcnew ::System::Data::DataColumn(L"chirality_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnchirality_Id);
    this->columnDocument_Id = (gcnew ::System::Data::DataColumn(L"Document_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnDocument_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnchirality_Id}, 
            true)));
    this->columnchirality_Id->AutoIncrement = true;
    this->columnchirality_Id->AllowDBNull = false;
    this->columnchirality_Id->Unique = true;
}

inline NewDataSet::chiralityRow^  NewDataSet::chiralityDataTable::NewchiralityRow() {
    return (cli::safe_cast<NewDataSet::chiralityRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::chiralityDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::chiralityRow(builder));
}

inline ::System::Type^  NewDataSet::chiralityDataTable::GetRowType() {
    return NewDataSet::chiralityRow::typeid;
}

inline ::System::Void NewDataSet::chiralityDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->chiralityRowChanged(this, (gcnew NewDataSet::chiralityRowChangeEvent((cli::safe_cast<NewDataSet::chiralityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::chiralityDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->chiralityRowChanging(this, (gcnew NewDataSet::chiralityRowChangeEvent((cli::safe_cast<NewDataSet::chiralityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::chiralityDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->chiralityRowDeleted(this, (gcnew NewDataSet::chiralityRowChangeEvent((cli::safe_cast<NewDataSet::chiralityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::chiralityDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->chiralityRowDeleting(this, (gcnew NewDataSet::chiralityRowChangeEvent((cli::safe_cast<NewDataSet::chiralityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::chiralityDataTable::RemovechiralityRow(NewDataSet::chiralityRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::chiralityDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"chiralityDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::cntDataTable::cntDataTable() {
    this->TableName = L"cnt";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::cntDataTable::cntDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::cntDataTable::cntDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::cntDataTable::nColumn::get() {
    return this->columnn;
}

inline ::System::Data::DataColumn^  NewDataSet::cntDataTable::mColumn::get() {
    return this->columnm;
}

inline ::System::Data::DataColumn^  NewDataSet::cntDataTable::chirality_IdColumn::get() {
    return this->columnchirality_Id;
}

inline ::System::Int32 NewDataSet::cntDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::cntRow^  NewDataSet::cntDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::cntRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::cntDataTable::AddcntRow(NewDataSet::cntRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::cntRow^  NewDataSet::cntDataTable::AddcntRow(System::Byte n, System::Byte m, NewDataSet::chiralityRow^  parentchiralityRowBychirality_cnt) {
    NewDataSet::cntRow^  rowcntRow = (cli::safe_cast<NewDataSet::cntRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {n, m, nullptr};
    if (parentchiralityRowBychirality_cnt != nullptr) {
        columnValuesArray[2] = parentchiralityRowBychirality_cnt[0];
    }
    rowcntRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowcntRow);
    return rowcntRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::cntDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::cntDataTable::Clone() {
    NewDataSet::cntDataTable^  cln = (cli::safe_cast<NewDataSet::cntDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::cntDataTable::CreateInstance() {
    return (gcnew NewDataSet::cntDataTable());
}

inline ::System::Void NewDataSet::cntDataTable::InitVars() {
    this->columnn = __super::Columns[L"n"];
    this->columnm = __super::Columns[L"m"];
    this->columnchirality_Id = __super::Columns[L"chirality_Id"];
}

inline ::System::Void NewDataSet::cntDataTable::InitClass() {
    this->columnn = (gcnew ::System::Data::DataColumn(L"n", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnn);
    this->columnm = (gcnew ::System::Data::DataColumn(L"m", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnm);
    this->columnchirality_Id = (gcnew ::System::Data::DataColumn(L"chirality_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnchirality_Id);
    this->columnn->AllowDBNull = false;
    this->columnm->AllowDBNull = false;
}

inline NewDataSet::cntRow^  NewDataSet::cntDataTable::NewcntRow() {
    return (cli::safe_cast<NewDataSet::cntRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::cntDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::cntRow(builder));
}

inline ::System::Type^  NewDataSet::cntDataTable::GetRowType() {
    return NewDataSet::cntRow::typeid;
}

inline ::System::Void NewDataSet::cntDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->cntRowChanged(this, (gcnew NewDataSet::cntRowChangeEvent((cli::safe_cast<NewDataSet::cntRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::cntDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->cntRowChanging(this, (gcnew NewDataSet::cntRowChangeEvent((cli::safe_cast<NewDataSet::cntRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::cntDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->cntRowDeleted(this, (gcnew NewDataSet::cntRowChangeEvent((cli::safe_cast<NewDataSet::cntRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::cntDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->cntRowDeleting(this, (gcnew NewDataSet::cntRowChangeEvent((cli::safe_cast<NewDataSet::cntRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::cntDataTable::RemovecntRow(NewDataSet::cntRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::cntDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"cntDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::regionLengthDataTable::regionLengthDataTable() {
    this->TableName = L"regionLength";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::regionLengthDataTable::regionLengthDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::regionLengthDataTable::regionLengthDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::regionLengthDataTable::UnitsColumn::get() {
    return this->columnUnits;
}

inline ::System::Data::DataColumn^  NewDataSet::regionLengthDataTable::minColumn::get() {
    return this->columnmin;
}

inline ::System::Data::DataColumn^  NewDataSet::regionLengthDataTable::Document_IdColumn::get() {
    return this->columnDocument_Id;
}

inline ::System::Int32 NewDataSet::regionLengthDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::regionLengthRow^  NewDataSet::regionLengthDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::regionLengthRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::regionLengthDataTable::AddregionLengthRow(NewDataSet::regionLengthRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::regionLengthRow^  NewDataSet::regionLengthDataTable::AddregionLengthRow(System::String^  Units, System::Byte min, 
            NewDataSet::DocumentRow^  parentDocumentRowByDocument_regionLength) {
    NewDataSet::regionLengthRow^  rowregionLengthRow = (cli::safe_cast<NewDataSet::regionLengthRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {Units, min, nullptr};
    if (parentDocumentRowByDocument_regionLength != nullptr) {
        columnValuesArray[2] = parentDocumentRowByDocument_regionLength[7];
    }
    rowregionLengthRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowregionLengthRow);
    return rowregionLengthRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::regionLengthDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::regionLengthDataTable::Clone() {
    NewDataSet::regionLengthDataTable^  cln = (cli::safe_cast<NewDataSet::regionLengthDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::regionLengthDataTable::CreateInstance() {
    return (gcnew NewDataSet::regionLengthDataTable());
}

inline ::System::Void NewDataSet::regionLengthDataTable::InitVars() {
    this->columnUnits = __super::Columns[L"Units"];
    this->columnmin = __super::Columns[L"min"];
    this->columnDocument_Id = __super::Columns[L"Document_Id"];
}

inline ::System::Void NewDataSet::regionLengthDataTable::InitClass() {
    this->columnUnits = (gcnew ::System::Data::DataColumn(L"Units", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnUnits);
    this->columnmin = (gcnew ::System::Data::DataColumn(L"min", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnmin);
    this->columnDocument_Id = (gcnew ::System::Data::DataColumn(L"Document_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnDocument_Id);
    this->columnUnits->AllowDBNull = false;
    this->columnmin->AllowDBNull = false;
}

inline NewDataSet::regionLengthRow^  NewDataSet::regionLengthDataTable::NewregionLengthRow() {
    return (cli::safe_cast<NewDataSet::regionLengthRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::regionLengthDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::regionLengthRow(builder));
}

inline ::System::Type^  NewDataSet::regionLengthDataTable::GetRowType() {
    return NewDataSet::regionLengthRow::typeid;
}

inline ::System::Void NewDataSet::regionLengthDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->regionLengthRowChanged(this, (gcnew NewDataSet::regionLengthRowChangeEvent((cli::safe_cast<NewDataSet::regionLengthRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::regionLengthDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->regionLengthRowChanging(this, (gcnew NewDataSet::regionLengthRowChangeEvent((cli::safe_cast<NewDataSet::regionLengthRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::regionLengthDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->regionLengthRowDeleted(this, (gcnew NewDataSet::regionLengthRowChangeEvent((cli::safe_cast<NewDataSet::regionLengthRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::regionLengthDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->regionLengthRowDeleting(this, (gcnew NewDataSet::regionLengthRowChangeEvent((cli::safe_cast<NewDataSet::regionLengthRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::regionLengthDataTable::RemoveregionLengthRow(NewDataSet::regionLengthRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::regionLengthDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"regionLengthDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::segmentLengthDataTable::segmentLengthDataTable() {
    this->TableName = L"segmentLength";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::segmentLengthDataTable::segmentLengthDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::segmentLengthDataTable::segmentLengthDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::segmentLengthDataTable::UnitsColumn::get() {
    return this->columnUnits;
}

inline ::System::Data::DataColumn^  NewDataSet::segmentLengthDataTable::minColumn::get() {
    return this->columnmin;
}

inline ::System::Data::DataColumn^  NewDataSet::segmentLengthDataTable::Document_IdColumn::get() {
    return this->columnDocument_Id;
}

inline ::System::Int32 NewDataSet::segmentLengthDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::segmentLengthRow^  NewDataSet::segmentLengthDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::segmentLengthRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::segmentLengthDataTable::AddsegmentLengthRow(NewDataSet::segmentLengthRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::segmentLengthRow^  NewDataSet::segmentLengthDataTable::AddsegmentLengthRow(System::String^  Units, System::Byte min, 
            NewDataSet::DocumentRow^  parentDocumentRowByDocument_segmentLength) {
    NewDataSet::segmentLengthRow^  rowsegmentLengthRow = (cli::safe_cast<NewDataSet::segmentLengthRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {Units, min, nullptr};
    if (parentDocumentRowByDocument_segmentLength != nullptr) {
        columnValuesArray[2] = parentDocumentRowByDocument_segmentLength[7];
    }
    rowsegmentLengthRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowsegmentLengthRow);
    return rowsegmentLengthRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::segmentLengthDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::segmentLengthDataTable::Clone() {
    NewDataSet::segmentLengthDataTable^  cln = (cli::safe_cast<NewDataSet::segmentLengthDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::segmentLengthDataTable::CreateInstance() {
    return (gcnew NewDataSet::segmentLengthDataTable());
}

inline ::System::Void NewDataSet::segmentLengthDataTable::InitVars() {
    this->columnUnits = __super::Columns[L"Units"];
    this->columnmin = __super::Columns[L"min"];
    this->columnDocument_Id = __super::Columns[L"Document_Id"];
}

inline ::System::Void NewDataSet::segmentLengthDataTable::InitClass() {
    this->columnUnits = (gcnew ::System::Data::DataColumn(L"Units", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnUnits);
    this->columnmin = (gcnew ::System::Data::DataColumn(L"min", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnmin);
    this->columnDocument_Id = (gcnew ::System::Data::DataColumn(L"Document_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnDocument_Id);
    this->columnUnits->AllowDBNull = false;
    this->columnmin->AllowDBNull = false;
}

inline NewDataSet::segmentLengthRow^  NewDataSet::segmentLengthDataTable::NewsegmentLengthRow() {
    return (cli::safe_cast<NewDataSet::segmentLengthRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::segmentLengthDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::segmentLengthRow(builder));
}

inline ::System::Type^  NewDataSet::segmentLengthDataTable::GetRowType() {
    return NewDataSet::segmentLengthRow::typeid;
}

inline ::System::Void NewDataSet::segmentLengthDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->segmentLengthRowChanged(this, (gcnew NewDataSet::segmentLengthRowChangeEvent((cli::safe_cast<NewDataSet::segmentLengthRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::segmentLengthDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->segmentLengthRowChanging(this, (gcnew NewDataSet::segmentLengthRowChangeEvent((cli::safe_cast<NewDataSet::segmentLengthRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::segmentLengthDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->segmentLengthRowDeleted(this, (gcnew NewDataSet::segmentLengthRowChangeEvent((cli::safe_cast<NewDataSet::segmentLengthRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::segmentLengthDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->segmentLengthRowDeleting(this, (gcnew NewDataSet::segmentLengthRowChangeEvent((cli::safe_cast<NewDataSet::segmentLengthRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::segmentLengthDataTable::RemovesegmentLengthRow(NewDataSet::segmentLengthRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::segmentLengthDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"segmentLengthDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::segmentSeparationDataTable::segmentSeparationDataTable() {
    this->TableName = L"segmentSeparation";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::segmentSeparationDataTable::segmentSeparationDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::segmentSeparationDataTable::segmentSeparationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::segmentSeparationDataTable::UnitsColumn::get() {
    return this->columnUnits;
}

inline ::System::Data::DataColumn^  NewDataSet::segmentSeparationDataTable::minColumn::get() {
    return this->columnmin;
}

inline ::System::Data::DataColumn^  NewDataSet::segmentSeparationDataTable::Document_IdColumn::get() {
    return this->columnDocument_Id;
}

inline ::System::Int32 NewDataSet::segmentSeparationDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::segmentSeparationRow^  NewDataSet::segmentSeparationDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::segmentSeparationRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::segmentSeparationDataTable::AddsegmentSeparationRow(NewDataSet::segmentSeparationRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::segmentSeparationRow^  NewDataSet::segmentSeparationDataTable::AddsegmentSeparationRow(System::String^  Units, 
            System::Byte min, NewDataSet::DocumentRow^  parentDocumentRowByDocument_segmentSeparation) {
    NewDataSet::segmentSeparationRow^  rowsegmentSeparationRow = (cli::safe_cast<NewDataSet::segmentSeparationRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {Units, min, nullptr};
    if (parentDocumentRowByDocument_segmentSeparation != nullptr) {
        columnValuesArray[2] = parentDocumentRowByDocument_segmentSeparation[7];
    }
    rowsegmentSeparationRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowsegmentSeparationRow);
    return rowsegmentSeparationRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::segmentSeparationDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::segmentSeparationDataTable::Clone() {
    NewDataSet::segmentSeparationDataTable^  cln = (cli::safe_cast<NewDataSet::segmentSeparationDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::segmentSeparationDataTable::CreateInstance() {
    return (gcnew NewDataSet::segmentSeparationDataTable());
}

inline ::System::Void NewDataSet::segmentSeparationDataTable::InitVars() {
    this->columnUnits = __super::Columns[L"Units"];
    this->columnmin = __super::Columns[L"min"];
    this->columnDocument_Id = __super::Columns[L"Document_Id"];
}

inline ::System::Void NewDataSet::segmentSeparationDataTable::InitClass() {
    this->columnUnits = (gcnew ::System::Data::DataColumn(L"Units", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnUnits);
    this->columnmin = (gcnew ::System::Data::DataColumn(L"min", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnmin);
    this->columnDocument_Id = (gcnew ::System::Data::DataColumn(L"Document_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnDocument_Id);
    this->columnUnits->AllowDBNull = false;
    this->columnmin->AllowDBNull = false;
}

inline NewDataSet::segmentSeparationRow^  NewDataSet::segmentSeparationDataTable::NewsegmentSeparationRow() {
    return (cli::safe_cast<NewDataSet::segmentSeparationRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::segmentSeparationDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::segmentSeparationRow(builder));
}

inline ::System::Type^  NewDataSet::segmentSeparationDataTable::GetRowType() {
    return NewDataSet::segmentSeparationRow::typeid;
}

inline ::System::Void NewDataSet::segmentSeparationDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->segmentSeparationRowChanged(this, (gcnew NewDataSet::segmentSeparationRowChangeEvent((cli::safe_cast<NewDataSet::segmentSeparationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::segmentSeparationDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->segmentSeparationRowChanging(this, (gcnew NewDataSet::segmentSeparationRowChangeEvent((cli::safe_cast<NewDataSet::segmentSeparationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::segmentSeparationDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->segmentSeparationRowDeleted(this, (gcnew NewDataSet::segmentSeparationRowChangeEvent((cli::safe_cast<NewDataSet::segmentSeparationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::segmentSeparationDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->segmentSeparationRowDeleting(this, (gcnew NewDataSet::segmentSeparationRowChangeEvent((cli::safe_cast<NewDataSet::segmentSeparationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::segmentSeparationDataTable::RemovesegmentSeparationRow(NewDataSet::segmentSeparationRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::segmentSeparationDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"segmentSeparationDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::DocumentRow::DocumentRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableDocument = (cli::safe_cast<NewDataSet::DocumentDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::DocumentRow::Type::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableDocument->TypeColumn]));
}
inline System::Void NewDataSet::DocumentRow::Type::set(System::String^  value) {
    this[this->tableDocument->TypeColumn] = value;
}

inline System::String^  NewDataSet::DocumentRow::outputDirectory::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableDocument->outputDirectoryColumn]));
}
inline System::Void NewDataSet::DocumentRow::outputDirectory::set(System::String^  value) {
    this[this->tableDocument->outputDirectoryColumn] = value;
}

inline System::Byte NewDataSet::DocumentRow::numberTubes::get() {
    return (cli::safe_cast<::System::Byte >(this[this->tableDocument->numberTubesColumn]));
}
inline System::Void NewDataSet::DocumentRow::numberTubes::set(System::Byte value) {
    this[this->tableDocument->numberTubesColumn] = value;
}

inline System::Decimal NewDataSet::DocumentRow::friction::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableDocument->frictionColumn]));
}
inline System::Void NewDataSet::DocumentRow::friction::set(System::Decimal value) {
    this[this->tableDocument->frictionColumn] = value;
}

inline System::Decimal NewDataSet::DocumentRow::gravity::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableDocument->gravityColumn]));
}
inline System::Void NewDataSet::DocumentRow::gravity::set(System::Decimal value) {
    this[this->tableDocument->gravityColumn] = value;
}

inline System::UInt16 NewDataSet::DocumentRow::numberExcitons::get() {
    return (cli::safe_cast<::System::UInt16 >(this[this->tableDocument->numberExcitonsColumn]));
}
inline System::Void NewDataSet::DocumentRow::numberExcitons::set(System::UInt16 value) {
    this[this->tableDocument->numberExcitonsColumn] = value;
}

inline System::UInt32 NewDataSet::DocumentRow::numberTimeSteps::get() {
    return (cli::safe_cast<::System::UInt32 >(this[this->tableDocument->numberTimeStepsColumn]));
}
inline System::Void NewDataSet::DocumentRow::numberTimeSteps::set(System::UInt32 value) {
    this[this->tableDocument->numberTimeStepsColumn] = value;
}

inline System::Int32 NewDataSet::DocumentRow::Document_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableDocument->Document_IdColumn]));
}
inline System::Void NewDataSet::DocumentRow::Document_Id::set(System::Int32 value) {
    this[this->tableDocument->Document_IdColumn] = value;
}

inline cli::array< NewDataSet::spacingRow^  >^  NewDataSet::DocumentRow::GetspacingRows() {
    if (this->Table->ChildRelations[L"Document_spacing"] == nullptr) {
        return gcnew cli::array< NewDataSet::spacingRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::spacingRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Document_spacing"])));
    }
}

inline cli::array< NewDataSet::LengthsRow^  >^  NewDataSet::DocumentRow::GetLengthsRows() {
    if (this->Table->ChildRelations[L"Document_Lengths"] == nullptr) {
        return gcnew cli::array< NewDataSet::LengthsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::LengthsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Document_Lengths"])));
    }
}

inline cli::array< NewDataSet::DeviceDimensionsRow^  >^  NewDataSet::DocumentRow::GetDeviceDimensionsRows() {
    if (this->Table->ChildRelations[L"Document_DeviceDimensions"] == nullptr) {
        return gcnew cli::array< NewDataSet::DeviceDimensionsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::DeviceDimensionsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Document_DeviceDimensions"])));
    }
}

inline cli::array< NewDataSet::chiralityRow^  >^  NewDataSet::DocumentRow::GetchiralityRows() {
    if (this->Table->ChildRelations[L"Document_chirality"] == nullptr) {
        return gcnew cli::array< NewDataSet::chiralityRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::chiralityRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Document_chirality"])));
    }
}

inline cli::array< NewDataSet::regionLengthRow^  >^  NewDataSet::DocumentRow::GetregionLengthRows() {
    if (this->Table->ChildRelations[L"Document_regionLength"] == nullptr) {
        return gcnew cli::array< NewDataSet::regionLengthRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::regionLengthRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Document_regionLength"])));
    }
}

inline cli::array< NewDataSet::segmentLengthRow^  >^  NewDataSet::DocumentRow::GetsegmentLengthRows() {
    if (this->Table->ChildRelations[L"Document_segmentLength"] == nullptr) {
        return gcnew cli::array< NewDataSet::segmentLengthRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::segmentLengthRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Document_segmentLength"])));
    }
}

inline cli::array< NewDataSet::segmentSeparationRow^  >^  NewDataSet::DocumentRow::GetsegmentSeparationRows() {
    if (this->Table->ChildRelations[L"Document_segmentSeparation"] == nullptr) {
        return gcnew cli::array< NewDataSet::segmentSeparationRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::segmentSeparationRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Document_segmentSeparation"])));
    }
}


inline NewDataSet::spacingRow::spacingRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablespacing = (cli::safe_cast<NewDataSet::spacingDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::spacingRow::Units::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablespacing->UnitsColumn]));
}
inline System::Void NewDataSet::spacingRow::Units::set(System::String^  value) {
    this[this->tablespacing->UnitsColumn] = value;
}

inline System::Decimal NewDataSet::spacingRow::min::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tablespacing->minColumn]));
}
inline System::Void NewDataSet::spacingRow::min::set(System::Decimal value) {
    this[this->tablespacing->minColumn] = value;
}

inline System::Int32 NewDataSet::spacingRow::Document_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablespacing->Document_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Document_Id\' in table \'spacing\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::spacingRow::Document_Id::set(System::Int32 value) {
    this[this->tablespacing->Document_IdColumn] = value;
}

inline NewDataSet::DocumentRow^  NewDataSet::spacingRow::DocumentRow::get() {
    return (cli::safe_cast<NewDataSet::DocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Document_spacing"])));
}
inline System::Void NewDataSet::spacingRow::DocumentRow::set(NewDataSet::DocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"Document_spacing"]);
}

inline ::System::Boolean NewDataSet::spacingRow::IsDocument_IdNull() {
    return this->IsNull(this->tablespacing->Document_IdColumn);
}

inline ::System::Void NewDataSet::spacingRow::SetDocument_IdNull() {
    this[this->tablespacing->Document_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::LengthsRow::LengthsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableLengths = (cli::safe_cast<NewDataSet::LengthsDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::LengthsRow::Units::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableLengths->UnitsColumn]));
}
inline System::Void NewDataSet::LengthsRow::Units::set(System::String^  value) {
    this[this->tableLengths->UnitsColumn] = value;
}

inline System::Decimal NewDataSet::LengthsRow::Lmin::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableLengths->LminColumn]));
}
inline System::Void NewDataSet::LengthsRow::Lmin::set(System::Decimal value) {
    this[this->tableLengths->LminColumn] = value;
}

inline System::Decimal NewDataSet::LengthsRow::Lmax::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableLengths->LmaxColumn]));
}
inline System::Void NewDataSet::LengthsRow::Lmax::set(System::Decimal value) {
    this[this->tableLengths->LmaxColumn] = value;
}

inline System::Int32 NewDataSet::LengthsRow::Document_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableLengths->Document_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Document_Id\' in table \'Lengths\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::LengthsRow::Document_Id::set(System::Int32 value) {
    this[this->tableLengths->Document_IdColumn] = value;
}

inline NewDataSet::DocumentRow^  NewDataSet::LengthsRow::DocumentRow::get() {
    return (cli::safe_cast<NewDataSet::DocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Document_Lengths"])));
}
inline System::Void NewDataSet::LengthsRow::DocumentRow::set(NewDataSet::DocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"Document_Lengths"]);
}

inline ::System::Boolean NewDataSet::LengthsRow::IsDocument_IdNull() {
    return this->IsNull(this->tableLengths->Document_IdColumn);
}

inline ::System::Void NewDataSet::LengthsRow::SetDocument_IdNull() {
    this[this->tableLengths->Document_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::DeviceDimensionsRow::DeviceDimensionsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableDeviceDimensions = (cli::safe_cast<NewDataSet::DeviceDimensionsDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::DeviceDimensionsRow::Units::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableDeviceDimensions->UnitsColumn]));
}
inline System::Void NewDataSet::DeviceDimensionsRow::Units::set(System::String^  value) {
    this[this->tableDeviceDimensions->UnitsColumn] = value;
}

inline System::Decimal NewDataSet::DeviceDimensionsRow::xdim::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableDeviceDimensions->xdimColumn]));
}
inline System::Void NewDataSet::DeviceDimensionsRow::xdim::set(System::Decimal value) {
    this[this->tableDeviceDimensions->xdimColumn] = value;
}

inline System::Decimal NewDataSet::DeviceDimensionsRow::ydim::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableDeviceDimensions->ydimColumn]));
}
inline System::Void NewDataSet::DeviceDimensionsRow::ydim::set(System::Decimal value) {
    this[this->tableDeviceDimensions->ydimColumn] = value;
}

inline System::Decimal NewDataSet::DeviceDimensionsRow::zdim::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableDeviceDimensions->zdimColumn]));
}
inline System::Void NewDataSet::DeviceDimensionsRow::zdim::set(System::Decimal value) {
    this[this->tableDeviceDimensions->zdimColumn] = value;
}

inline System::Int32 NewDataSet::DeviceDimensionsRow::Document_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableDeviceDimensions->Document_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Document_Id\' in table \'DeviceDimensions\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::DeviceDimensionsRow::Document_Id::set(System::Int32 value) {
    this[this->tableDeviceDimensions->Document_IdColumn] = value;
}

inline NewDataSet::DocumentRow^  NewDataSet::DeviceDimensionsRow::DocumentRow::get() {
    return (cli::safe_cast<NewDataSet::DocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Document_DeviceDimensions"])));
}
inline System::Void NewDataSet::DeviceDimensionsRow::DocumentRow::set(NewDataSet::DocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"Document_DeviceDimensions"]);
}

inline ::System::Boolean NewDataSet::DeviceDimensionsRow::IsDocument_IdNull() {
    return this->IsNull(this->tableDeviceDimensions->Document_IdColumn);
}

inline ::System::Void NewDataSet::DeviceDimensionsRow::SetDocument_IdNull() {
    this[this->tableDeviceDimensions->Document_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::chiralityRow::chiralityRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablechirality = (cli::safe_cast<NewDataSet::chiralityDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::chiralityRow::chirality_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablechirality->chirality_IdColumn]));
}
inline System::Void NewDataSet::chiralityRow::chirality_Id::set(System::Int32 value) {
    this[this->tablechirality->chirality_IdColumn] = value;
}

inline System::Int32 NewDataSet::chiralityRow::Document_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablechirality->Document_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Document_Id\' in table \'chirality\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::chiralityRow::Document_Id::set(System::Int32 value) {
    this[this->tablechirality->Document_IdColumn] = value;
}

inline NewDataSet::DocumentRow^  NewDataSet::chiralityRow::DocumentRow::get() {
    return (cli::safe_cast<NewDataSet::DocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Document_chirality"])));
}
inline System::Void NewDataSet::chiralityRow::DocumentRow::set(NewDataSet::DocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"Document_chirality"]);
}

inline ::System::Boolean NewDataSet::chiralityRow::IsDocument_IdNull() {
    return this->IsNull(this->tablechirality->Document_IdColumn);
}

inline ::System::Void NewDataSet::chiralityRow::SetDocument_IdNull() {
    this[this->tablechirality->Document_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::cntRow^  >^  NewDataSet::chiralityRow::GetcntRows() {
    if (this->Table->ChildRelations[L"chirality_cnt"] == nullptr) {
        return gcnew cli::array< NewDataSet::cntRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::cntRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"chirality_cnt"])));
    }
}


inline NewDataSet::cntRow::cntRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablecnt = (cli::safe_cast<NewDataSet::cntDataTable^  >(this->Table));
}

inline System::Byte NewDataSet::cntRow::n::get() {
    return (cli::safe_cast<::System::Byte >(this[this->tablecnt->nColumn]));
}
inline System::Void NewDataSet::cntRow::n::set(System::Byte value) {
    this[this->tablecnt->nColumn] = value;
}

inline System::Byte NewDataSet::cntRow::m::get() {
    return (cli::safe_cast<::System::Byte >(this[this->tablecnt->mColumn]));
}
inline System::Void NewDataSet::cntRow::m::set(System::Byte value) {
    this[this->tablecnt->mColumn] = value;
}

inline System::Int32 NewDataSet::cntRow::chirality_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecnt->chirality_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'chirality_Id\' in table \'cnt\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::cntRow::chirality_Id::set(System::Int32 value) {
    this[this->tablecnt->chirality_IdColumn] = value;
}

inline NewDataSet::chiralityRow^  NewDataSet::cntRow::chiralityRow::get() {
    return (cli::safe_cast<NewDataSet::chiralityRow^  >(this->GetParentRow(this->Table->ParentRelations[L"chirality_cnt"])));
}
inline System::Void NewDataSet::cntRow::chiralityRow::set(NewDataSet::chiralityRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"chirality_cnt"]);
}

inline ::System::Boolean NewDataSet::cntRow::Ischirality_IdNull() {
    return this->IsNull(this->tablecnt->chirality_IdColumn);
}

inline ::System::Void NewDataSet::cntRow::Setchirality_IdNull() {
    this[this->tablecnt->chirality_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::regionLengthRow::regionLengthRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableregionLength = (cli::safe_cast<NewDataSet::regionLengthDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::regionLengthRow::Units::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableregionLength->UnitsColumn]));
}
inline System::Void NewDataSet::regionLengthRow::Units::set(System::String^  value) {
    this[this->tableregionLength->UnitsColumn] = value;
}

inline System::Byte NewDataSet::regionLengthRow::min::get() {
    return (cli::safe_cast<::System::Byte >(this[this->tableregionLength->minColumn]));
}
inline System::Void NewDataSet::regionLengthRow::min::set(System::Byte value) {
    this[this->tableregionLength->minColumn] = value;
}

inline System::Int32 NewDataSet::regionLengthRow::Document_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableregionLength->Document_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Document_Id\' in table \'regionLength\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::regionLengthRow::Document_Id::set(System::Int32 value) {
    this[this->tableregionLength->Document_IdColumn] = value;
}

inline NewDataSet::DocumentRow^  NewDataSet::regionLengthRow::DocumentRow::get() {
    return (cli::safe_cast<NewDataSet::DocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Document_regionLength"])));
}
inline System::Void NewDataSet::regionLengthRow::DocumentRow::set(NewDataSet::DocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"Document_regionLength"]);
}

inline ::System::Boolean NewDataSet::regionLengthRow::IsDocument_IdNull() {
    return this->IsNull(this->tableregionLength->Document_IdColumn);
}

inline ::System::Void NewDataSet::regionLengthRow::SetDocument_IdNull() {
    this[this->tableregionLength->Document_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::segmentLengthRow::segmentLengthRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablesegmentLength = (cli::safe_cast<NewDataSet::segmentLengthDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::segmentLengthRow::Units::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablesegmentLength->UnitsColumn]));
}
inline System::Void NewDataSet::segmentLengthRow::Units::set(System::String^  value) {
    this[this->tablesegmentLength->UnitsColumn] = value;
}

inline System::Byte NewDataSet::segmentLengthRow::min::get() {
    return (cli::safe_cast<::System::Byte >(this[this->tablesegmentLength->minColumn]));
}
inline System::Void NewDataSet::segmentLengthRow::min::set(System::Byte value) {
    this[this->tablesegmentLength->minColumn] = value;
}

inline System::Int32 NewDataSet::segmentLengthRow::Document_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablesegmentLength->Document_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Document_Id\' in table \'segmentLength\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::segmentLengthRow::Document_Id::set(System::Int32 value) {
    this[this->tablesegmentLength->Document_IdColumn] = value;
}

inline NewDataSet::DocumentRow^  NewDataSet::segmentLengthRow::DocumentRow::get() {
    return (cli::safe_cast<NewDataSet::DocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Document_segmentLength"])));
}
inline System::Void NewDataSet::segmentLengthRow::DocumentRow::set(NewDataSet::DocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"Document_segmentLength"]);
}

inline ::System::Boolean NewDataSet::segmentLengthRow::IsDocument_IdNull() {
    return this->IsNull(this->tablesegmentLength->Document_IdColumn);
}

inline ::System::Void NewDataSet::segmentLengthRow::SetDocument_IdNull() {
    this[this->tablesegmentLength->Document_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::segmentSeparationRow::segmentSeparationRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablesegmentSeparation = (cli::safe_cast<NewDataSet::segmentSeparationDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::segmentSeparationRow::Units::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablesegmentSeparation->UnitsColumn]));
}
inline System::Void NewDataSet::segmentSeparationRow::Units::set(System::String^  value) {
    this[this->tablesegmentSeparation->UnitsColumn] = value;
}

inline System::Byte NewDataSet::segmentSeparationRow::min::get() {
    return (cli::safe_cast<::System::Byte >(this[this->tablesegmentSeparation->minColumn]));
}
inline System::Void NewDataSet::segmentSeparationRow::min::set(System::Byte value) {
    this[this->tablesegmentSeparation->minColumn] = value;
}

inline System::Int32 NewDataSet::segmentSeparationRow::Document_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablesegmentSeparation->Document_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Document_Id\' in table \'segmentSeparation\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::segmentSeparationRow::Document_Id::set(System::Int32 value) {
    this[this->tablesegmentSeparation->Document_IdColumn] = value;
}

inline NewDataSet::DocumentRow^  NewDataSet::segmentSeparationRow::DocumentRow::get() {
    return (cli::safe_cast<NewDataSet::DocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Document_segmentSeparation"])));
}
inline System::Void NewDataSet::segmentSeparationRow::DocumentRow::set(NewDataSet::DocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"Document_segmentSeparation"]);
}

inline ::System::Boolean NewDataSet::segmentSeparationRow::IsDocument_IdNull() {
    return this->IsNull(this->tablesegmentSeparation->Document_IdColumn);
}

inline ::System::Void NewDataSet::segmentSeparationRow::SetDocument_IdNull() {
    this[this->tablesegmentSeparation->Document_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::DocumentRowChangeEvent::DocumentRowChangeEvent(NewDataSet::DocumentRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::DocumentRow^  NewDataSet::DocumentRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::DocumentRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::spacingRowChangeEvent::spacingRowChangeEvent(NewDataSet::spacingRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::spacingRow^  NewDataSet::spacingRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::spacingRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::LengthsRowChangeEvent::LengthsRowChangeEvent(NewDataSet::LengthsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::LengthsRow^  NewDataSet::LengthsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::LengthsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::DeviceDimensionsRowChangeEvent::DeviceDimensionsRowChangeEvent(NewDataSet::DeviceDimensionsRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::DeviceDimensionsRow^  NewDataSet::DeviceDimensionsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::DeviceDimensionsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::chiralityRowChangeEvent::chiralityRowChangeEvent(NewDataSet::chiralityRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::chiralityRow^  NewDataSet::chiralityRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::chiralityRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::cntRowChangeEvent::cntRowChangeEvent(NewDataSet::cntRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::cntRow^  NewDataSet::cntRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::cntRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::regionLengthRowChangeEvent::regionLengthRowChangeEvent(NewDataSet::regionLengthRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::regionLengthRow^  NewDataSet::regionLengthRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::regionLengthRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::segmentLengthRowChangeEvent::segmentLengthRowChangeEvent(NewDataSet::segmentLengthRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::segmentLengthRow^  NewDataSet::segmentLengthRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::segmentLengthRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::segmentSeparationRowChangeEvent::segmentSeparationRowChangeEvent(NewDataSet::segmentSeparationRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::segmentSeparationRow^  NewDataSet::segmentSeparationRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::segmentSeparationRowChangeEvent::Action::get() {
    return this->eventAction;
}
